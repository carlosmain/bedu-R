curve(dnorm(x, mean = 80, sd = 10), from = 40, to = 120,
col='blue', main = "Densidad de probabilidad normal",
ylab = "f(x)", xlab = "X")
pnorm(q = 60, mean = 80, sd = 10)
pnorm(q = 150, mean = 80, sd = 10) - pnorm(q = 90, mean = 80, sd = 10)
qnorm(p= 0.05, mean=80, sd=10); qnorm(p = 0.05, mean = 80, sd = 10, lower.tail = FALSE)
curve(dexp(x, rate = arate.exp), from=0, to=20,
col='blue', main = "Distribución exponencial",
ylab = "f(x)", xlab = "Tiempo entre eventos")
mean = 12500
sd = 7800
pnorm(q = 20000, mean = mean, sd = sd, lower.tail = FALSE)
pnorm(q = 11000, mean = mean, sd = sd, lower.tail = TRUE)
pnorm(q = 15000, mean = mean, sd = sd) - pnorm(q = 13000, mean = mean, sd = sd)
qnorm(q = 0.10, mean = mean, sd = sd)
qnorm(p = 0.10, mean = mean, sd = sd)
muestra <- c(1.82165160, 1.06824486, 0.38492498, 0.52779737, 0.17989299,
0.38599556, 0.01565589, 0.53166559, 1.08000160, 0.61289266,
0.16050136, 0.35143952, 0.41076615, 1.09468497, 0.53319069,
1.09299258, 0.61343642, 0.15565428, 1.44299912, 0.43475144,
0.60773249, 3.09911364, 0.36185393, 1.00729974, 0.30582083,
0.35948934, 0.20484999, 0.13779880, 0.28064973, 2.03910927,
0.19785169, 0.46706578, 0.30224129)
ggplot(data, aes(muestra)) +
geom_histogram(colour = 'red', fill = 'pink',
alpha = 0.7, bins = 7) + # Intensidad del color fill
ggtitle('Histograma para la muestra de tamaño 33') +
labs(x = 'valores', y = 'Frecuencia') +
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
data <- as.data.frame(muestra)
library(ggplot2)
ggplot(data, aes(muestra)) +
geom_histogram(colour = 'red', fill = 'pink',
alpha = 0.7, bins = 7) + # Intensidad del color fill
ggtitle('Histograma para la muestra de tamaño 33') +
labs(x = 'valores', y = 'Frecuencia') +
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(muestra)
muestra <- c(0.191825830, 0.090832594, 0.078292920, 0.023187365, 0.275329543,
0.120594281, 0.011730131, 0.727012539, 0.108018454, 0.004800318,
0.070778142, 0.539517386, 0.165975518, 0.136258035, 0.216427932,
0.002537893, 0.563361006, 0.027473375, 0.380678788, 0.310481407,
0.142732480, 0.836212104, 0.149678939, 0.288385634, 0.535300943,
0.491167954, 0.429518316, 0.043545325, 0.443696671, 0.078943105,
0.205748181, 0.167813525, 0.017052988, 0.082652468, 0.125213495,
0.166680130, 0.128717925, 0.003860131, 0.045212421, 0.086816614)
(z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40)))
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
axis(side = 1, at = z.05, font = 2, padj = 1, lwd = 2)
text(2.5, 0.1, labels = expression(alpha == 0.05), col = "red")
polygon(c(z.05, x[x>=z.05], max(x)), c(0, y[x>=z.05], 0), col="red")
axis(side = 1, at = z.05, font = 2, padj = 1, lwd = 2)
text(2.5, 0.1, labels = expression(alpha == 0.05), col = "red")
(pvalue <- pnorm(z0, lower.tail = FALSE))
muestra <- c(0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
0)
(z0 <- (mean(muestra)-0.9)/sqrt((0.9*(1-0.9))/45))
(z.05 <- qnorm(p = 0.05))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=z.05], z.05), c(0, y[x<=z.05], 0), col="red")
axis(side = 1, at = z.05, font = 2, padj = 1, lwd = 2)
text(-3, 0.05, labels = expression(alpha == 0.05), col = "red")
(pvalue <- pnorm(z0))
muestra <- c(166.6896, 175.2299, 170.4218, 176.2738, 183.5532, 179.4669,
179.2014, 173.6239, 176.1826, 182.2429, 176.9100, 166.4572,
172.5695, 180.9723, 180.7529)
(t0 <- (mean(muestra)-170)/(sd(muestra)/sqrt(15)))
(t.05 <- qt(p = 0.05, df = 14, lower.tail = FALSE))
(pvalue <- pt(t0, df = 14, lower.tail = FALSE))
t.test(x = muestra, alternative = "greater", mu = 170)
set.seed(2022)
par(mfrow = c(2, 2))
set.seed(2022)
par(mfrow = c(2, 2))
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")}
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")}
{
sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")
}
{
sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample10, main = "n = 10", xlab = "")
}
{
sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample100, main = "n = 100", xlab = "")
}
{
sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample1000, main = "n = 1000", xlab = "")
}
dev.off()
mean(sample1000); 1/0.1
sd(sample1000); sqrt(1/0.1**2)/sqrt(1000)
####### SESIÓN 5: TEOREMA DEL LÍMITE CENTRAL E INFERENCIA ESTADÍSTICA  ########
###############################################################################
set.seed(2022)
par(mfrow=c(2,2))
hist(sample5, main = "n = 5", xlab = "")}
par(mfrow=c(2,2))
hist(sample5, main = "n = 5", xlab = "")}
{sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")}
{sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample10, main = "n = 10", xlab = "")}
{sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample100, main = "n = 100", xlab = "")}
{sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample1000, main = "n = 1000", xlab = "")}
mean(sample1000); 1/0.1
sd(sample1000); sqrt(1/0.1**2)/sqrt(1000)
a = 5; b = 1
dbeta(x, shape1 = a, shape2 = b)
curve(dbeta(x, shape1 = a, shape2 = b),
from = 0, to = 1,
xlab = "X", ylab = "f(x)", main = "Distribución Beta")
par(mfrow=c(2,2))
{sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample5, main = "n = 5", xlab = "")}
{sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample10, main = "n = 10", xlab = "")}
{sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample1000, main = "n = 1000", xlab = "")}
{sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample1000, main = "n = 1000", xlab = "")}
{sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample100, main = "n = 100", xlab = "")}
dev.off()
{sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample5, main = "n = 5", xlab = "")}
{sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample10, main = "n = 10", xlab = "")}
{sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample100, main = "n = 100", xlab = "")}
dev.off()
par(mfrow=c(2,2))
{sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample5, main = "n = 5", xlab = "")}
{sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample10, main = "n = 10", xlab = "")}
{sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample100, main = "n = 100", xlab = "")}
{sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample1000, main = "n = 1000", xlab = "")}
dev.off()
mean(sample1000); a/b
mean(sample1000); a/(a+b)
sd(sample1000); sqrt(a/a+b**2)/sqrt(1000)
sd(sample1000); sqrt((a*b)/((a+b+1)*(a+b)**2))/sqrt(1000)
sd(sample1000); sqrt((a*b)/((a+b+1)*(a+b)**2))
sd(sample1000); sqrt((a*b)/((a+b+1)*(a+b)**2))/sqrt(1000)
{curve(dnorm(x), from = -4, to = 4, xlab = "X", ylab = "f(x)", main = "Distribución t - Student")
legend(x = 2, y = 0.4, legend=c("N(0,1)", "df=1", "df=5", "df=10", "df=100"),
col=c("black","blue", "green", "orange", "red"), lty = 1, bty = "n", cex=0.8)}
curve(dt(x, 1), from = -4, to = 4, col = "blue", add = TRUE)
curve(dt(x, 5), from = -4, to = 4, col = "green", add = TRUE)
curve(dt(x, 10), from = -4, to = 4, col = "orange", add = TRUE)
curve(dt(x, 100), from = -4, to = 4, col = "red", add = TRUE)
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/telecom_service.csv")
t.test(x = df$total_intl_calls, alternative = 'less', mu = 4.54)
t.test(x = df$number_vmail_messages, alternative='more', mu = 7.79)
t.test(x = df$number_vmail_messages, alternative='greater', mu = 7.79)
t.test(x = df$customer_service_calls, alternative = 'two.sided', mu = 1.59)
var.test(df[df$churn == 1, "customer_service_calls"],
df[df$churn == 0, "customer_service_calls"],
ratio = 1, alternative = "two.sided")
t.test(x = df[df$churn == 1, "customer_service_calls"],
y = df[df$churn == 0, "customer_service_calls"],
alternative = "greater", mu = 0, var.equal = TRUE)
var.test(df[df$churn == 1, "total_intl_calls"],
df[df$churn == 0, "total_intl_calls"],
ratio = 1, alternative = "two.sided")
var.test(df[df$churn == 1, "total_intl_calls"],
df[df$churn == 0, "total_intl_calls"],
ratio = 1, alternative = "two.sided")
url = "https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-07/Data/cbe_data.csv"
CBE <- read.csv(url, header = TRUE)
head(CBE)
class(CBE)
Elec.ts <- ts(CBE[,3], start = c(1958, 1), frequency =  12)
Beer.ts <- ts(CBE[,2], start = c(1958, 1), frequency =  12)
Choc.ts <- ts(CBE[,1], start = c(1958, 1), frequency =  12)
class(Elec.ts);class(Beer.ts);class(Choc.ts)
plot(cbind(Elec.ts, Beer.ts, Choc.ts),
main = "Producci?n de Chocolate, Cerveza y Electricidad",
xlab = "Tiempo",
sub = "Enero de 1958 - Diciembre de 1990")
set.seed(3)
Elec.ts
set.seed(3)
w <- rnorm(300)
plot(w, type = "l", xlab = "")
title(main = "Ruido Blanco Gaussiano", xlab = "Tiempo")
mean(w);sd(w)
acf(w)
pacf(w)
x <- w <- rnorm(1000)
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(diff(x))
pacf(diff(x))
acf(x)
pacf(x)
plot(diff(x), type = "l", main = "Primera diferencia de X",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(diff(x))
pacf(diff(x))
seed(10)
set.seed(10)
x <- w <- rnorm(1000)
x <- w <- rnorm(200)
for(t in 1:200) x[t] <- 0.8 * x[t-1] + w[t]
for(t in 2:200) x[t] <- 0.8 * x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==0.8 * x[t-1] + w[t]))
acf(x)
pacf(x)
plot(x, type = "l", main = "Proceso AR(1) Simulado",
xlab = "Tiempo", ylab = expression(x[t]),
sub = expression(x[t]==0.8 * x[t-1] + w[t]))
#3
acf(x, main= "")
#4
ar(x, method = "mle")
#1
set.seed(10)
x <- w <- rnorm(200)
#2
for(t in 2:200) x[t] <- 0.8 * x[t-1] + w[t]
#3
acf(x, main= "")
pacf(x)
#4
ar(x, method = "mle")
set.seed(3)
x <- w <- rnorm(1000)
for(i in 3:1000) x[i] <- 0.5*x[i-1] + x[i-1] - 0.5*x[i-2] + w[i] + 0.3*w[i-1]
plot(x, type = "l",
main = "Serie simulada de un modelo ARIMA(1, 1, 1)",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t] == 0.5*x[t-1] + x[t-1] - 0.5*x[t-2] + w[t] + 0.3*w[t-1]))
acf(x)
pacf(x)
arima(x, order = c(1,1,1))
arima(x, order = c(2,1,1))
arima(x, order = c(3,1,1))
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
mean(Elec.ts)
title(main = "Serie Diferenciada de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif Serie",
sub = "Gráfica de la serie diferenciada de primer Órden")
title(main = "Serie Diferenciada de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif Serie",
sub = "Gráfica de la serie diferenciada de primer Órden")
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
mean(Elec.ts)
plot(diff(Elec.ts), xlab = "", ylab = "")
title(main = "Serie de log dif de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif log-Serie",
sub = "Gráfica de la serie log-transformada diferenciada de primer órden")
plot(diff(log(Elec.ts)), xlab = "", ylab = "")
acf(log(Elec.ts))
acf(diff(log(Elec.ts)))
fit <- arima(log(Elec.ts), order = c(0, 1, 1), seas = c(2, 0, 2))
pr <- predict(fit, 12)$predict
pr <- predict(fit, 12)$pred
pr <- predict(fit, 12)$pred
source("~/Downloads/BEDU/R/postwork/Postwork.R")
source("~/Downloads/BEDU/R/postwork/Postwork.R")
#2. Importa los datos a R como un Dataframe. NOTA: No olvides cambiar tu dirección de trabajo a la ruta donde descargaste tu archivo
sp1 <- read.csv("SP1.csv")
setwd("~/Downloads/BEDU/R/postwork/sesion-01")
#2. Importa los datos a R como un Dataframe. NOTA: No olvides cambiar tu dirección de trabajo a la ruta donde descargaste tu archivo
sp1 <- read.csv("SP1.csv")
View(sp1)
View(sp1)
FTHG <- sp1$FTHG
FTAG <- sp1$FTAG
#4. Consulta cómo funciona la función `table` en `R`. Para ello, puedes
#ingresar los comandos `help("table")` o `?table` para leer la documentación.
help(table)
?table
#5. Responde a las siguientes preguntas:
#  a) ¿Cuántos goles tuvo el partido con mayor empate?
#  b) ¿En cuántos partidos ambos equipos empataron 0 a 0?
#  c) ¿En cuántos partidos el equipo local (HG) tuvo la mayor goleada sin
#  dejar que el equipo visitante (AG) metiera un solo gol?
table(FHG, FTAG)
#5. Responde a las siguientes preguntas:
#  a) ¿Cuántos goles tuvo el partido con mayor empate?
#  b) ¿En cuántos partidos ambos equipos empataron 0 a 0?
#  c) ¿En cuántos partidos el equipo local (HG) tuvo la mayor goleada sin
#  dejar que el equipo visitante (AG) metiera un solo gol?
table(FTHG, FTAG)
data(iris)
library(ggplot2)
complete.cases(iris)
str(iris)
data(iris)
# Cargamos el dataset
str(iris)
# Desplegamos la estructura interna del objeto para saber sus variables
class(iris)
# Desplegamos la estructura interna del objeto para saber sus variables
dim(iris)
# Desplegamos la estructura interna del objeto para saber sus variables
complete.cases(iris)
library(ggplot2)
# Se carga la libreria ggplot para poder realizar las graficas
gplot1 <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, color=Species,
size=Petal.Width)) + geom_point(shape=10, alpha=0.5)
library(dplyr)
iris_mean <- iris %>%
group_by(Species) %>%
summarize(sepal.length.mean = mean(Sepal.Length),
sepal.width.mean = mean(Sepal.Width),
petal.length.mean = mean(Petal.Length),
petal.width.mean = mean(Petal.Width))
View(iris_mean)
iris_mean1 <- iris %>% group_by(Species) %>% summarize_all(mean)
View(iris_mean1)
iris_mean <- iris %>% group_by(Species) %>% summarize_all(mean)
View(iris_mean1)
remove(iris_mean1)
remove(gplot1)
g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, color=Species,
size=Petal.Width)) + geom_point(shape=10, alpha=0.5)
g
ggplot() + geom_point(data = iris,
aes(x=Sepal.Length, y = Sepal.Width,
color=Species, size=Petal.Width), shape=10, alpha=0.5) +
geom_point(data=iris_mean, aes(x=sepal.length.mean, y=sepal.width.mean),
shape = 23, size = 4, fill = "black", stroke=2, alpha=0.6) +
labs(x= "Sepal Length", y="Sepal Width") + ggtitle("Combined Plot") +
theme_light() + scale_size("Petal Width")
iris_mean <- iris %>%
group_by(Species) %>%
summarize(sepal.length.mean = mean(Sepal.Length),
sepal.width.mean = mean(Sepal.Width),
petal.length.mean = mean(Petal.Length),
petal.width.mean = mean(Petal.Width))
ggplot() + geom_point(data = iris,
aes(x=Sepal.Length, y = Sepal.Width,
color=Species, size=Petal.Width), shape=10, alpha=0.5) +
geom_point(data=iris_mean, aes(x=sepal.length.mean, y=sepal.width.mean),
shape = 23, size = 4, fill = "black", stroke=2, alpha=0.6) +
labs(x= "Sepal Length", y="Sepal Width") + ggtitle("Combined Plot") +
theme_light() + scale_size("Petal Width")
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/boxp.csv")
str(df)
summary(df)
df$Categoria <- factor(df$Categoria)
df$Grupo <- factor(df$Grupo)
complete.cases(df)
df.clean <- df[complete.cases(df),]
summary(df.clean)
mean(df.clean$Mediciones)
median(df.clean$Mediciones)
Mode(df.clean$Mediciones)
library(DescTools)
Mode(df.clean$Mediciones)
var(df.clean$Mediciones)
sd(df.clean$Mediciones)
cuartiles <- quantile(df.clean$Mediciones, probs = c(0.25, 0.50, 0.75))
library(ggplot2)
hist(df.clean$Mediciones)
ggplot(df.clean, aes(Mediciones)) +
geom_histogram(bins = 4) +
labs(title = "Histograma", x = "Mediciones", y = "Frequency") +
theme_classic()
View(df.clean)
View(df.clean)
boxplot(df.clean$Mediciones~df.clean$Categoria~df.clean$Grupo)
boxplot(df.clean$Categoria~df.clean$Mediciones)
summary(df.clean)
boxplot(split(df.clean, f = df$Categoria))
boxplot(df.clean$Mediciones~df.clean$Categoria~df.clean$Grupo)
data=ToothGrowth
View(data)
View(data)
View(df.clean)
View(df.clean)
boxplot( Categoria~Mediciones,
data=df.clean,
main="Different boxplots for per day growth",
xlab="Tooth length",
ylab=" numeric Dose in milligrams/day",
col="blue",
border="black"
)
boxplot( Categoria~Mediciones,
data=df.clean,
main="Different boxplots for per day growth",
xlab="Tooth length",
ylab=" numeric Dose in milligrams/day",
col="blue",
border="black", horizontal = TRUE
)
boxplot( Categoria~Mediciones,
data=df.clean,
col="blue",
border="black", horizontal = TRUE
)
boxplot(df.clean)
